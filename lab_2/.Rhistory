# AIR & WATER PROCESSING
AIR <- as.numeric(AIR_E[!tf])
# MEAN/MEDIAN/MODE
mean(AIR)
# MEAN/MEDIAN/MODE
summary(AIR)
getmode(AIR)
# MEAN/MEDIAN/MODE
summary(AIR_E) # MEAN & MEDIAN included
# MODE FUNCTION
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x,ux)))]
}
mode(AIR)
view(AIR)
View(AIR)
sum(is.na(AIR))
tf <- is.na(AIR_E)
box(tf)
hist(tf)
stem(tf)
hist(AIR)
EPI_data <- read.csv('2010EPI_data.csv')
# FIX ROW NAMES
names(EPI_data) <- as.character(unlist(EPI_data[1,])) # replace column names
EPI_data <- EPI_data[-1,] # get rid of names from rows
row.names(EPI_data) <- NULL # fix row ordering
# SET EPI_data AS DEFAULT
attach(EPI_data) 	# sets the ‘default’ object
tf <- is.na(AIR_E)
# AIR & WATER PROCESSING
AIR <- as.numeric(AIR_E[!tf])
tfint <- as.int(tf)
tfint <- as.integer(as.logical(tf))
hist(tfint)
summary(tfint)
sum(is.na(AIR))
tf <- is.na(as.numeric(AIR_E))
EPI_data <- read.csv('2010EPI_data.csv')
# FIX ROW NAMES
names(EPI_data) <- as.character(unlist(EPI_data[1,])) # replace column names
EPI_data <- EPI_data[-1,] # get rid of names from rows
row.names(EPI_data) <- NULL # fix row ordering
# SET EPI_data AS DEFAULT
attach(EPI_data) 	# sets the ‘default’ object
tf <- is.na(as.numeric(AIR_E))
tfint <- as.integer(as.logical(tf))
hist(tfint)
summary(tfint)
# AIR & WATER PROCESSING
AIR <- as.numeric(AIR_E[!tf])
WATER <- as.numeric(WATER_E[!tf])
# MEAN/MEDIAN/MODE
mean(AIR)
median(AIR)
mode(AIR)
# MODE FUNCTION
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode(AIR)
Mode(AIR)
mmm <- function(x) {
mean(x)
median(x)
Mode(x)
}
mmm(AIR)
mmm <- function(x) {
print(mean(x))
print(median(x))
print(Mode(x))
}
mmm(AIR)
mmm <- function(x) {
print('MEAN:', mean(x))
print(median(x))
print(Mode(x))
}
mmm(AIR)
mmm <- function(x) {
print(paste('Mean:',mean(x)))
print(median(x))
print(Mode(x))
}
mmm(AIR)
mmm <- function(x) {
print(paste('Mean:',mean(x)))
print(paste('Median:',median(x)))
print(paste('Mode:',Mode(x)))
}
mmm(AIR)
mmm(WATER)
boxplot(AIR,WATER)
qplot(AIR,WATER,geom='boxplot')
library(ggplot2)
qplot(AIR,WATER,geom='boxplot')
ggplot(aes(x=interaction(AIR,WATER), y=Quality)) + geom_boxplot()
ggplot((AIR,WATER),aes(x=interaction(AIR,WATER), y=Quality)) + geom_boxplot()
qplot(AIR,Quality,geom='boxplot')
qplot(AIR,geom='boxplot')
ggplot(AIR,aes(x=AIR_E,y=Quality)) + goem_boxplot()
ggplot(1,AIR,aes(x=AIR_E,y=Quality)) + goem_boxplot()
ggplot("1",AIR,aes(x=AIR_E,y=Quality)) + goem_boxplot()
qplot("1",AIR,geom='boxplot')
qplot(AIR_E,AIR,geom='boxplot',xlab='Quality')
qplot("AIR_E",AIR,geom='boxplot',xlab='Quality')
qplot("AIR_E",AIR,geom='boxplot',ylab='Quality')
qplot("AIR_E",AIR,geom='boxplot',ylab='Quality',xlab='')
qplot("WATER_E",WATER,geom='boxplot',ylab='Quality',xlab='')
boxplot(AIR,WATER,names=c("AIR_E","WATER_E"))
# NOX & SO2 PROCESSING
NOX <- as.numeric(NOX_pt[!tf])
SO2 <- as.numeric(SO2_pt[!tf])
mmm(NOX)
mmm(SO2)
boxplot(NOX,SO2,names=c("NOX_pt","SO2_pt"))
boxplot(OZONE,WQI,names=c("OZONE_pt","WQI_pt"))
OZONE <- as.numeric(OZONE_pt[!tf])
WQI <- as.numeric(WQI_pt[!tf])
tfWQI <- is.na(as.numeric(WQI_pt))
WQI <- as.numeric(WQI_pt[!tf])
boxplot(OZONE,WQI,names=c("OZONE_pt","WQI_pt"))
EPI_data <- read.csv('2010EPI_data.csv')
library(ggplot2)
# FIX ROW NAMES
names(EPI_data) <- as.character(unlist(EPI_data[1,])) # replace column names
EPI_data <- EPI_data[-1,] # get rid of names from rows
row.names(EPI_data) <- NULL # fix row ordering
# SET EPI_data AS DEFAULT
attach(EPI_data) 	# sets the ‘default’ object
tf <- is.na(as.numeric(AIR_E))
# MODE FUNCTION
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# MEAN MEDIAN AND MODE
mmm <- function(x) {
print(paste('Mean:',mean(x)))
print(paste('Median:',median(x)))
print(paste('Mode:',Mode(x)))
}
# AIR & WATER PROCESSING
AIR <- as.numeric(AIR_E[!tf])
WATER <- as.numeric(WATER_E[!tf])
mmm(AIR)
mmm(WATER)
boxplot(AIR,WATER,names=c("AIR_E","WATER_E"))
# NOX, SO2, ETC PROCESSING
NOX <- as.numeric(NOX_pt[!tf])
SO2 <- as.numeric(SO2_pt[!tf])
OZONE <- as.numeric(OZONE_pt[!tf])
WQI <- as.numeric(WQI_pt[!tf])
mmm(NOX)
mmm(SO2)
boxplot(OZONE,WQI,names=c("OZONE_pt","WQI_pt"))
# CLIMATE, AGRICULTURE, ETC PROCESSING
CLIM <- as.numeric(CLIMATE[!tf])
AGRI <- as.numeric(AGRICULTURE[!tf])
FISH <- as.numeric(FISHERIES_pt[!tf])
NMVOC <- as.numeric(NMVOC_pt[!tf])
FISH <- as.numeric(FISHERIES[!tf])
mmm(CLIM)
mmm(AGRI)
boxplot(FISH,NMVOC,names=c("FISHERIES","NMVOC_pt"))
# GENERATE SOME BOXPLOTS
ENV_H <- as.numeric(ENVHEALTH[!tf])
ECOS <- as.numeric(ECOSYSTEM[!tf])
boxplot(ENV_H,ECOS)
qqplot(ENVHEALTH,ECOSYSTEM)
EPI_data <- read.csv('2010EPI_data.csv')
library(ggplot2)
# FIX ROW NAMES
names(EPI_data) <- as.character(unlist(EPI_data[1,])) # replace column names
EPI_data <- EPI_data[-1,] # get rid of names from rows
row.names(EPI_data) <- NULL # fix row ordering
# SET EPI_data AS DEFAULT
attach(EPI_data) 	# sets the ‘default’ object
tf <- is.na(as.numeric(AIR_E))
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H)
ENVHEALTH <- as.numeric(ENVHEALTH[!tf])
tf <- is.na(as.numeric(AIR_E))
EPI_data <- read.csv('2010EPI_data.csv')
library(ggplot2)
# FIX ROW NAMES
names(EPI_data) <- as.character(unlist(EPI_data[1,])) # replace column names
EPI_data <- EPI_data[-1,] # get rid of names from rows
row.names(EPI_data) <- NULL # fix row ordering
# SET EPI_data AS DEFAULT
attach(EPI_data) 	# sets the ‘default’ object
tf <- is.na(as.numeric(AIR_E))
ENVHEALTH <- as.numeric(ENVHEALTH[!tf])
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H)
DALY <- as.numeric(DALY[!tf])
AIR_H <- as.numeric(AIR_H[!tf])
WATER_H <- as.numeric(WATER_H[!tf])
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H)
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H,names=c('ENVHEALTH,DALY,AIR_H,WATER_H'))
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H,names=c('ENVHEALTH','DALY','AIR_H','WATER_H'))
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H,names=c('ENV','DALY','AIR','WATER'))
lmENVH <- lm(ENVHEALTH~DALY+AIR_H+WATER_H)
lmENVH
summary(lmENVH)
cENVH(coeflmENVH)
cENVH <- coef(lmENVH)
# PREDICTS
DALYNEW <- c(seq(5,95,5))
AIR_HNEW <- c(seq(5,95,5))
WATER_HNEW <- c(seq(5,95,5))
NEW <- data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV <- predict(lmENVH,NEW,interval="prediction")
cENV <- predict(lmENVH,NEW,interval="confidence")
# REGRESSION FOR AIR
lmAIRH <- lm(AIR_H~DALY+ENVHEALTH+WATER_H)
lmAIRH
summary(lmAIRH)
cAIRH <- coef(lmAIRH)
# REGRESSION FOR AIR
lmAIRE <- lm(AIR_E~DALY+AIR_H+WATER_H)
lmAIRE
summary(lmAIRE)
AIR_E <- as.numeric(AIR_E[!tf])
CLIMATE <- as.numeric(CLIMATE[!tf])
# REGRESSION FOR AIR
lmAIRE <- lm(AIR_E~DALY+AIR_H+WATER_H)
lmAIRE
summary(lmAIRE)
cAIRE <- coef(lmAIRE)
# REGRESSION FOR CILMATE
lmCLIM <- lm(CLIMATE~DALY+ENVHEALTH+WATER_H)
lmCLIM
summary(lmCLIM)
cCLIM <- coef(lmCLIM)
# REGRESSION FOR AIR
Model1 <- lm(CLIMATE~DALY+ENVHEALTH+WATER_H)
Model1
summary(Model1)
cAIRE <- coef(Model1)
# REGRESSION FOR CILMATE
Model2 <- lm(CLIMATE~DALY+ENVHEALTH+WATER_H)
Model1
summary(Model1)
cCLIM <- coef(Model1)
# SHAPIRO-WILK
shapiro.test(ENVHEALTH)
shapiro.test(ECOSYSTEM)
ECOSYSTEM <- as.numeric(ECOSYSTEM[!tf])
shapiro.test(ECOSYSTEM)
dim(ENVHEALTH)
shapiro.test(ENVHEALTH)
shapiro.test(DALY)
shapiro.test(AIR_H)
shapiro.test(WATER_H)
hist(DALY)
RegData <- read.csv('dataset_multipleRegression.csv')
View(RegData)
lmROLL <- lm(ROLL~UNEM+HGRAD)
lmROLL <- lm(RegData$ROLL~RegData$UNEM+RegData$HGRAD)
RegData <- read.csv('dataset_multipleRegression.csv')
lmROLL <- lm(RegData$ROLL~RegData$UNEM+RegData$HGRAD)
summary(lmROLL)
# Predict ROLL if Unem = 7% and HGrad = 90,000
Punemp <- 7
phgrad <- 90000
Phgrad <- 90000
predict(Punem,Phgrad,interval="prediction")
predict(Punemp,Phgrad,interval="prediction")
NEW <- data.frame(Punemp,Phgrad)
predicts <- predict(lmROLL,NEW,interval="prediction")
print(predicts)
View(predicts)
predict(lmROLL,NEW)
predict(lmROLL,newdata=Punemp,Phgrad)
predict(lmROLL,newdata=(Punemp,Phgrad))
newdat <- data.frame(Punemp,Phgrad)
predict(lmROLL,newdat)
colnames(newdat) <- c(UNEM,HGRAD)
colnames(newdat) <- c('UNEM','HGRAD')
predict(lmROLL,newdat)
View(lmROLL)
RegData <- read.csv('dataset_multipleRegression.csv')
# No preprocessing needed, everythin looks great :)
attach(RegData)
lmROLL <- lm(ROLL~UNEM+HGRAD)
summary(lmROLL)
# Predict ROLL if Unem = 7% and HGrad = 90,000
Punemp <- 7
Phgrad <- 90000
newdat <- data.frame(Punemp,Phgrad)
colnames(newdat) <- c('UNEM','HGRAD')
predict(lmROLL,newdat)
# OK NOW ADD PER CAPITA
lmROLLCPTA <- lm(ROLL~UNEM+HGRAD+INC)
RegData <- read.csv('dataset_multipleRegression.csv')
# No preprocessing needed, everythin looks great :)
attach(RegData)
lmROLL <- lm(ROLL~UNEM+HGRAD)
summary(lmROLL)
# Predict ROLL if Unem = 7% and HGrad = 90,000
Punemp <- 7
Phgrad <- 90000
newdat <- data.frame(Punemp,Phgrad)
colnames(newdat) <- c('UNEM','HGRAD')
predict(lmROLL,newdat)
# OK NOW ADD PER CAPITA
lmROLLCPTA <- lm(ROLL~UNEM+HGRAD+INC)
summary(lmROLLCPTA)
# Predict ROLL if Unem = 7%, HGrad = 90k, and INC = 25k
Pinc <- 25000
newdat2 <- data.frame(Punemp,Phgrad,Pinc)
colnames(newdat) <- c('UNEM','HGRAD','INC')
newdat2 <- data.frame(Punemp,Phgrad,Pinc)
colnames(newdat2) <- c('UNEM','HGRAD','INC')
predict(lmROLLCPTA,newdat2)
library(ggplot2)
attach(diamonds)
library(ggplot2)
attach(diamonds)
View(diamonds)
rowSums(is.na(diamonds))
rowSums(is.na(price))
sum(is.na(price))
# histogram
hist(price)
# histogram
hist(price, breaks=250)
# histogram
hist(price, breaks=100)
# histogram
hist(price, breaks=500)
# histogram
hist(price, breaks=250)
# histogram
hist(price, breaks=10)
hist(price, breaks=250)
bar(color)
barplot(color)
barplot(height=color, names=color)
barplot(height=color)
barplot(table(color))
ggplot(color, aes(x=as.factor(cyl), fill=as.factor(cyl) )) +
geom_bar( ) +
scale_fill_grey(start = 0.2, end = 1) +
theme(legend.position="none")
EPI_data <- read.csv('2010EPI_data.csv')
library(ggplot2)
# FIX ROW NAMES
names(EPI_data) <- as.character(unlist(EPI_data[1,])) # replace column names
EPI_data <- EPI_data[-1,] # get rid of names from rows
row.names(EPI_data) <- NULL # fix row ordering
# SET EPI_data AS DEFAULT
attach(EPI_data) 	# sets the ‘default’ object
tf <- is.na(as.numeric(AIR_E))
# MODE FUNCTION
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# MEAN MEDIAN AND MODE
mmm <- function(x) {
print(paste('Mean:',mean(x)))
print(paste('Median:',median(x)))
print(paste('Mode:',Mode(x)))
}
# AIR & WATER PROCESSING
AIR <- as.numeric(AIR_E[!tf])
WATER <- as.numeric(WATER_E[!tf])
mmm(AIR)
mmm(WATER)
# NOX, SO2, ETC PROCESSING
NOX <- as.numeric(NOX_pt[!tf])
SO2 <- as.numeric(SO2_pt[!tf])
OZONE <- as.numeric(OZONE_pt[!tf])
WQI <- as.numeric(WQI_pt[!tf])
mmm(NOX)
mmm(SO2)
# CLIMATE, AGRICULTURE, ETC PROCESSING
CLIM <- as.numeric(CLIMATE[!tf])
AGRI <- as.numeric(AGRICULTURE[!tf])
FISH <- as.numeric(FISHERIES[!tf])
NMVOC <- as.numeric(NMVOC_pt[!tf])
mmm(CLIM)
mmm(AGRI)
EPI_data <- read.csv('2010EPI_data.csv')
library(ggplot2)
# FIX ROW NAMES
names(EPI_data) <- as.character(unlist(EPI_data[1,])) # replace column names
EPI_data <- EPI_data[-1,] # get rid of names from rows
row.names(EPI_data) <- NULL # fix row ordering
# SET EPI_data AS DEFAULT
attach(EPI_data) 	# sets the ‘default’ object
tf <- is.na(as.numeric(AIR_E))
# PREPROCESS
ENVHEALTH <- as.numeric(ENVHEALTH[!tf])
DALY <- as.numeric(DALY[!tf])
AIR_H <- as.numeric(AIR_H[!tf])
WATER_H <- as.numeric(WATER_H[!tf])
AIR_E <- as.numeric(AIR_E[!tf])
CLIMATE <- as.numeric(CLIMATE[!tf])
ECOSYSTEM <- as.numeric(ECOSYSTEM[!tf])
# REGRESSION
boxplot(ENVHEALTH,DALY,AIR_H,WATER_H,names=c('ENV','DALY','AIR','WATER'))
lmENVH <- lm(ENVHEALTH~DALY+AIR_H+WATER_H)
lmENVH
summary(lmENVH)
cENVH <- coef(lmENVH)
# PREDICTS
DALYNEW <- c(seq(5,95,5))
AIR_HNEW <- c(seq(5,95,5))
WATER_HNEW <- c(seq(5,95,5))
NEW <- data.frame(DALYNEW,AIR_HNEW,WATER_HNEW)
pENV <- predict(lmENVH,NEW,interval="prediction")
cENV <- predict(lmENVH,NEW,interval="confidence")
# REGRESSION FOR AIR
Model1 <- lm(CLIMATE~DALY+ENVHEALTH+WATER_H)
Model1
summary(Model1)
cAIRE <- coef(Model1)
# REGRESSION FOR CILMATE
Model2 <- lm(CLIMATE~DALY+ENVHEALTH+WATER_H)
Model1
summary(Model1)
cCLIM <- coef(Model1)
Model2
summary(Model2)
cCLIM <- coef(Model2)
# SHAPIRO-WILK
shapiro.test(ENVHEALTH)
shapiro.test(ECOSYSTEM)
shapiro.test(ENVHEALTH)
shapiro.test(DALY)
shapiro.test(AIR_H)
shapiro.test(WATER_H)
# SAMPLE SIZE IS 163, BETWEEN 5 and 5000
# SAMPLE SIZE IS 163, BETWEEN 5 and 5000
# p-val IS <0.5 for EVERY TEST
RegData <- read.csv('dataset_multipleRegression.csv')
# No preprocessing needed, everythin looks great :)
attach(RegData)
lmROLL <- lm(ROLL~UNEM+HGRAD)
summary(lmROLL)
# Predict ROLL if Unem = 7% and HGrad = 90,000
Punemp <- 7
Phgrad <- 90000
newdat <- data.frame(Punemp,Phgrad)
colnames(newdat) <- c('UNEM','HGRAD')
predict(lmROLL,newdat)
# OK NOW ADD PER CAPITA
lmROLLCPTA <- lm(ROLL~UNEM+HGRAD+INC)
summary(lmROLLCPTA)
# Predict ROLL if Unem = 7%, HGrad = 90k, and INC = 25k
Pinc <- 25000
newdat2 <- data.frame(Punemp,Phgrad,Pinc)
colnames(newdat2) <- c('UNEM','HGRAD','INC')
predict(lmROLLCPTA,newdat2)
library(ggplot2)
attach(diamonds)
hist(price, breaks=250)
# bar plot color &
ggplot(diamonds, aes(x=as.factor(color), fill=as.factor(color) )) +
geom_bar( ) +
scale_color_gradient(low = "#132B43", high = "#56B1F7") +
theme(legend.position="none")
ggplot(diamonds, aes(x=as.factor(clarity), fill=as.factor(clarity) )) +
geom_bar( ) +
scale_color_gradient(low = "#132B43", high = "#56B1F7") +
theme(legend.position="none")
# scatterplot
ggplot(diamonds, aes(x=price, y=carat, color=clarity)) + geom_point()
# cut vs price
aggregate(x=price, by=list(cut), FUN=mean)
# color by price and carat
aggregate(x=price, by=list(color), FUN=mean)
aggregate(x=price, by=list(color), FUN=median)
aggregate(x=carat, by=list(color), FUN=mean)
aggregate(x=carat, by=list(color), FUN=median)
# boxplot diamonds, cut
ggplot(diamonds, aes(x=cut, y=price)) + geom_boxplot()
ggplot(diamonds, aes(x=cut, y=price, color=cut)) + geom_boxplot()
ggplot(diamonds, aes(x=cut, y=carat, color=cut)) + geom_boxplot()
# average price by clarity & color
ggplot(diamonds, aes(x=clarity, y=carat)) + stat_summary(FUN=mean, geom="col") + ylab("average carat")
# average price by clarity & color
ggplot(diamonds, aes(x=color, y=carat)) + stat_summary(FUN=mean, geom="col") + ylab("average carat")
library(ggplot2)
library(nycflights13)
View(flights)
# plot delay by carrier
ggplot(flights, aes(x=carrier, y=dep_delay)) + stat_summary(FUN=mean, geom="col") + ylab("average departure delay")
# delay difference by distance
ggplot(flights, aes(x=arr_delay, y=dep_delay, color=distance)) + geom_point()
# delay difference by month
ggplot(flights, aes(x=month, y=dep_delay, group=1)) + stat_summary(FUN=mean, geom="path")
# flight difference by month
ggplot(flights, aes(x=month, fill=month )) +
geom_bar( ) +
scale_color_gradient(low = "#132B43", high = "#56B1F7") +
theme(legend.position="none")
# average delay by carrier
ggplot(flights, aes(x=carrier, y=arr_delay)) + stat_summary(FUN=mean, geom="col")
# tot flights for each airport
ggplot(flights, aes(x=origin, fill=origin )) +
geom_bar( ) +
scale_color_gradient(low = "#132B43", high = "#56B1F7") +
theme(legend.position="none")
# Distance vs Air Time
ggplot(flights, aes(x=distance, y=air_time)) + geom_point()
lmDist <- lm(flights$distance~flights$air_time)
summary(lmDist)
